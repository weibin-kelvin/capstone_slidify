confusionMatrix(ptree7, testnew1$SeriousDlqin2yrs)$byClass
confusionMatrix(ptree8, testnew1$SeriousDlqin2yrs)$byClass
modFit6
library("ROCR")
install.packages("ROCR")
testnew1<-testnew[30001:5000,]
ptree1<-predict(modFit1, newdata=testnew1)
ptree2<-predict(modFit2, newdata=testnew1)
ptree3<-predict(modFit3, newdata=testnew1)
confusionMatrix(ptree1, testnew1$SeriousDlqin2yrs)$byClass
confusionMatrix(ptree2, testnew1$SeriousDlqin2yrs)$byClass
confusionMatrix(ptree3, testnew1$SeriousDlqin2yrs)$byClass
confusionMatrix(ptree4, testnew1$SeriousDlqin2yrs)$byClass
confusionMatrix(ptree5, testnew1$SeriousDlqin2yrs)$byClass
confusionMatrix(ptree6, testnew1$SeriousDlqin2yrs)$byClass
confusionMatrix(ptree7, testnew1$SeriousDlqin2yrs)$byClass
confusionMatrix(ptree8, testnew1$SeriousDlqin2yrs)$byClass
ctrl<- trainControl(summaryFunction=twoClassSummary,classProb=T)
modFit2<-train(SeriousDlqin2yrs~., data=trainnew1, method="svmRadial", trControl=ctrl, metric="ROC")
modFit2
summary(modFit2)
summary(modFit3)
summary(modFit4)
summary(modFit5)
train<-read.csv("cs-training.csv")
test<-read.csv("cs-test.csv")
train$t<-1
test$t<-0
master<-rbind(train,test)
preObj<-preProcess(master,method="medianImpute")
masternew<-predict(preObj,master)
str(masternew)
trainnew<-masternew[masternew$t==1,]
testnew<-masternew[masternew$t==0,]
modFit3<-train(SeriousDlqin2yrs~., data=trainnew1, method="nnet", trControl=ctrl, metric="ROC")
ptree3<-predict(modFit3, newdata=testnew1)
ptree3
mean(ptree3)
mean(as.numeric(ptree3)
)
str(trainnew1)
trainnew<-masternew[masternew$t==1,]
trainnew<-masternew[masternew$t==1,]
str(trainnew1)
masternew<-predict(preObj,master)
trainnew<-masternew[masternew$t==1,]
str(trainnew1)
str(masternew)
trainnew<-masternew[masternew$t==1,]
testnew<-masternew[masternew$t==0,]
str(trainnew1)
str(trainnew)
trainnew1<-trainnew[1:3000,]
modFit3<-train(SeriousDlqin2yrs~., data=trainnew1, method="nnet", trControl=ctrl, metric="ROC")
modFit3<-train(SeriousDlqin2yrs~., data=trainnew1, method="nnet")
ptree3<-predict(modFit3, newdata=testnew1)
ptree3
trainnew1<-trainnew[1:3000,]
str(trainnew1)
system.time(modFit2<-train(SeriousDlqin2yrs~., data=trainnew1, method="svmRadial"))
system.time(modFit3<-train(SeriousDlqin2yrs~., data=trainnew1, method="nnet"))
system.time(modFit4<-train(SeriousDlqin2yrs~., data=trainnew1, method="LogitBoost"))
system.time(modFit5<-train(SeriousDlqin2yrs~., data=trainnew1, method="ada"))
system.time(modFit6<-train(SeriousDlqin2yrs~., data=trainnew1, method="nb"))
system.time(modFit7<-train(SeriousDlqin2yrs~., data=trainnew1, method="gbm"))
system.time(modFit8<-train(SeriousDlqin2yrs~., data=trainnew1, method="knn"))
system.time(modFit8<-train(SeriousDlqin2yrs~., data=trainnew1, method="knn")) #3.20
system.time(modFit7<-train(SeriousDlqin2yrs~., data=trainnew1, method="gbm")) #9.08
system.time(modFit3<-train(SeriousDlqin2yrs~., data=trainnew1, method="nnet")) #16.35
system.time(modFit2<-train(SeriousDlqin2yrs~., data=trainnew1, method="svmRadial")) #23.89
getDoParWorkers()
registerDoSEQ()
getDoParWorkers()
system.time(modFit8<-train(SeriousDlqin2yrs~., data=trainnew1, method="knn")) #3.20s
system.time(modFit7<-train(SeriousDlqin2yrs~., data=trainnew1, method="gbm")) #9.08s
system.time(modFit3<-train(SeriousDlqin2yrs~., data=trainnew1, method="nnet")) #16.35s
system.time(modFit2<-train(SeriousDlqin2yrs~., data=trainnew1, method="svmRadial")) #23.89s
ptree1<-predict(modFit1, newdata=testnew1)
ptree2<-predict(modFit2, newdata=testnew1)
ptree3<-predict(modFit3, newdata=testnew1)
ptree4<-predict(modFit4, newdata=testnew1)
ptree5<-predict(modFit5, newdata=testnew1)
ptree6<-predict(modFit6, newdata=testnew1)
ptree7<-predict(modFit7, newdata=testnew1)
ptree8<-predict(modFit8, newdata=testnew1)
ptree2
ptree3
summary(ptree3)
table(ptree3)
table(testnew1)
table(testnew1$SeriousDlqin2yrs)
View(testnew1)
ptree7<-predict(modFit7, newdata=testnew1)
ptree7
ptree8
table(ptree8)
testnew1<-testnew[5001:7000,]
ptree2<-predict(modFit2, newdata=testnew1)
ptree3<-predict(modFit3, newdata=testnew1)
View(testnew1)
mean(testnew1$SeriousDlqin2yrs)
testnew1<-testnew[5001:12000,]
mean(testnew1$SeriousDlqin2yrs)
mean(testnew$SeriousDlqin2yrs)
testnew1<-trainnew[5001:12000,]
mean(testnew1$SeriousDlqin2yrs)
ptree2<-predict(modFit2, newdata=testnew1)
ptree3<-predict(modFit3, newdata=testnew1)
confusionMatrix(ptree2, testnew1$SeriousDlqin2yrs)$byClass
masternew$SeriousDlqin2yrs<-as.factor(masternew$SeriousDlqin2yrs)
str(masternew)
trainnew<-masternew[masternew$t==1,]
testnew<-masternew[masternew$t==0,]
modFit7<-train(SeriousDlqin2yrs~., data=trainnew1, method="gbm", trControl=ctrl, metric="ROC")
modFit8<-train(SeriousDlqin2yrs~., data=trainnew1, method="knn", trControl=ctrl, metric="ROC")
trainnew1<-trainnew[1:3000,]
modFit7<-train(SeriousDlqin2yrs~., data=trainnew1, method="gbm", trControl=ctrl, metric="ROC")
ptree7<-predict(modFit7, newdata=testnew1)
ptree7<-predict(modFit7, newdata=testnew1, type="prob")
ptree7<-predict(modFit7, newdata=testnew1, type="prob")
ptree7<-predict(modFit7, newdata=testnew1$SeriousDlqin2yrs, type="prob")
ptree7<-predict(modFit7, newdata=testnew1)
ptree7<-predict(modFit7, newdata=testnew1, type="prob")
?as.factor
masternew$SeriousDlqin2yrs<-as.factor(masternew$SeriousDlqin2yrs, labels=c("yes","no"))
masternew$SeriousDlqin2yrs<-as.factor(masternew$SeriousDlqin2yrs,levels=c("1","0") labels=c("yes","no"))
masternew$SeriousDlqin2yrs<-as.factor(masternew$SeriousDlqin2yrs,levels=c("1","0"), labels=c("yes","no"))
masternew$SeriousDlqin2yrs<-factor(masternew$SeriousDlqin2yrs,levels=c("1","0"), labels=c("yes","no"))
str(masternew)
View(masternew)
trainnew<-masternew[masternew$t==1,]
testnew<-masternew[masternew$t==0,]
modFit7<-train(SeriousDlqin2yrs~., data=trainnew1, method="gbm", trControl=ctrl, metric="ROC")
ptree7<-predict(modFit7, newdata=testnew1, type="prob")
system.time(modFit8<-train(SeriousDlqin2yrs~., data=trainnew1, method="knn")) #3.20s #5.3
ptree8<-predict(modFit8, newdata=testnew1, type="prob")
str(trainnew)
str(trainnew1)
testnew1<-trainnew[5001:12000,]
ptree7<-predict(modFit7, newdata=testnew1, type="prob")
system.time(modFit8<-train(SeriousDlqin2yrs~., data=trainnew1, method="knn")) #3.20s #5.3
ptree8<-predict(modFit8, newdata=testnew1, type="prob")
View(masternew)
modFit7
modFit8
cl <- makeCluster(3)  # Use 3 cores
clusterEvalQ(cl, library(foreach))
registerDoParallel(cl) # register these 3 cores with the "foreach" package
modFit8<-train(SeriousDlqin2yrs~., data=trainnew1, method="knn", trControl=ctrl, metric="ROC")
ptree8<-predict(modFit8, newdata=testnew1, type="prob")
levels(testnew1$SeriousDlqin2yrs)
make.names(levels(testnew1$SeriousDlqin2yrs))
ptree8<-predict(modFit8, newdata=testnew1)
ptree8<-predict(modFit8, newdata=testnew1,type="prob")
View(trainnew1)
trainnew1<-trainnew[1:3000,]
View(trainnew1)
modFit7<-train(SeriousDlqin2yrs~., data=trainnew1, method="gbm", trControl=ctrl, metric="ROC")
modFit8<-train(SeriousDlqin2yrs~., data=trainnew1, method="knn", trControl=ctrl, metric="ROC")
trainnew<-subset(trainnew,c=-t)
View(trainnew)
trainnew<-subset(trainnew,select=-t)
testnew<-subset(testnew,select=-t)
ptree7<-predict(modFit7, newdata=testnew1, type="prob")
View(ptree7)
ptree8<-predict(modFit8, newdata=testnew1,type="prob")
View(ptree8)
mean(testnew1$SeriousDlqin2yrs)
View(testnew1)
View(ptree7)
getDoParWorkers()
preObj<-preProcess(train,method="medianImpute")
trainnew<-predict(preObj,train)
View(trainnew)
trainnew$SeriousDlqin2yrs<-factor(trainnew$SeriousDlqin2yrs,levels=c("1","0"), labels=c("yes","no"))
str(trainnew)
intrain<-createDataPartition(y=trainnew$SeriousDlqin2yrs,p=0.8,list=FALSE)
training<-data[intrain,]
training<-trainnew[intrain,]
testing<-trainnew[-intrain,]
View(training)
?trainControl
for (i in 1:8)
{}
for (i in 1:8)
{remove(modFit[i])
}
for (i in 1:8)
remove(modFiti)
remove(modFit1)
remove(modFit2)
remove(modFit3)
remove(modFit4)
remove(modFit5)
remove(modFit6)
remove(modFit7)
remove(modFit8)
library(rpart)
library(nnet)
library(caret)
library(rattle)
library(foreach)
library(doParallel)
library(randomForest)
library(kernlab)
library(MASS)
library(rpart)
library(nnet)
library(caTools)
library(ada)
library(plyr)
library(klaR)
library(gbm)
library(knn)
cl <- makeCluster(3)  # Use 3 cores
clusterEvalQ(cl, library(foreach))
registerDoParallel(cl) # register these 3 cores with the "foreach" package
train<-read.csv("cs-training.csv")
preObj<-preProcess(train,method="medianImpute")
trainnew<-predict(preObj,train)
trainnew$SeriousDlqin2yrs<-factor(trainnew$SeriousDlqin2yrs,levels=c("1","0"), labels=c("yes","no"))
str(trainnew)
intrain<-createDataPartition(y=trainnew$SeriousDlqin2yrs,p=0.8,list=FALSE)
training<-trainnew[intrain,]
testing<-trainnew[-intrain,]
ctrl<- trainControl(summaryFunction=twoClassSummary,classProb=TRUE)
system.time(modFit1<-train(SeriousDlqin2yrs~., data=training, method="rpart", trControl=ctrl, metric="ROC"))
system.time(modFit2<-train(SeriousDlqin2yrs~., data=training, method="svmRadial", trControl=ctrl, metric="ROC"))
modFit1
fancyRpartPlot(modFit1$finalModel)
modFit1$finalModel
system.time(modFit4<-train(SeriousDlqin2yrs~., data=training, method="LogitBoost", trControl=ctrl, metric="ROC"))
system.time(modFit5<-train(SeriousDlqin2yrs~., data=training, method="ada", trControl=ctrl, metric="ROC"))
modFit5
save(modFit1, file="modFit1_rpart")
save(modFit1, file="modFit1_rpart.rda")
modFit1
remove(modFit1)
load("modFit1_rpart.rda")
ptree1<-predict(modFit1, newdata=testing, type="prob")
View(ptree1)
system.time(x<-1+1)
x
system.time(x<-1+1/0)
system.time(x<-1+sqrt(-1))
system.time(modFit8<-train(SeriousDlqin2yrs~., data=training, method="knn", trControl=ctrl, metric="ROC"))
modFit8<-train(SeriousDlqin2yrs~., data=training, method="knn", trControl=ctrl, metric="ROC")
getDoParWorkers()
registerDoSEQ()
cl <- makeCluster(3)  # Use 3 cores
clusterEvalQ(cl, library(foreach))
registerDoParallel(cl) # register these 3 cores with the "foreach" package
getDoParWorkers()
system.time(modFit8<-train(SeriousDlqin2yrs~., data=training, method="knn", trControl=ctrl, metric="ROC"))
data<-read.csv("5stocks1.csv")
data<-read.csv("C:/Users/user/Desktop/QRM/5stocks1.csv")
View(data)
library(ggplot2)
colnames(data)
data<-read.csv("C:/Users/user/Desktop/QRM/5stocks1.csv")
View(data)
g<-ggplot(data, aes(AA,Date))
g+geom_point
g+geom_point()
g<-ggplot(data, aes(Date,AA))
g+geom_point()
class(data$date)
class(data$Date)
class(data$AA)
data$Date<-as.date(data$Date)
View(data)
data$Date<-as.Date(data$Date)
View(data)
data<-read.csv("C:/Users/user/Desktop/QRM/5stocks1.csv")
View(data)
data$Date<-as.Date(data$Date, format="%d/%m/%Y")
View(data)
data<-read.csv("C:/Users/user/Desktop/QRM/5stocks1.csv")
View(data)
data$Date<-as.Date(data$Date, format="%d/%m/%Y")
View(data)
data$AA<-as.numeric(data$AA)
g<-ggplot(data, aes(Date,AA))
g+geom_point()
AA
data$AA
data$AA<-as.numeric(as.character(data$AA))
g<-ggplot(data, aes(Date,AA))
g+geom_point()
data$AA
View(data)
data<-read.csv("C:/Users/user/Desktop/QRM/5stocks1.csv")
View(data)
data$Date<-as.Date(data$Date, format="%d/%m/%Y")
data$AA<-as.numeric(levels(data$AA))[data$AA]
g<-ggplot(data, aes(Date,AA))
g+geom_point()
data$AA<-as.numeric(levels(data$AA))[data$AA]
data$MSFT<-as.numeric(levels(data$MSFT))[data$MSFT]
data$GS<-as.numeric(levels(data$GS))[data$GS]
data$UPMKY<-as.numeric(levels(data$UPMKY))[data$UPMKY]
data$NOK<-as.numeric(levels(data$NOK))[data$NOK]
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g<-ggplot(data, aes(Date,Price))
g+geom_point()+geom_smooth(method="lm")
g<-ggplot(data, aes(Date,GS))
g+geom_point()+geom_smooth(method="lm")
par(new=TRUE)
g<-ggplot(data, aes(Date,GS))
g+geom_point()+geom_smooth(method="lm")
g<-ggplot(data, aes(Date,GS))
g+geom_point()+geom_smooth(method="lm")
par(new=TRUE)
g<-ggplot(data, aes(Date,AA))
g+geom_point()+geom_smooth(method="lm")
g<-ggplot(data, aes(Date,AA))
g+geom_point()+geom_smooth(method="lm")
g<-ggplot(data, aes(Date,AA))
g+geom_point()+geom_smooth(method="lm")
g<-ggplot(data, aes(Date,GS))
g+geom_point()+geom_smooth(method="lm")
g<-ggplot(data, aes(Date,AA))
g+geom_point()+geom_smooth(method="lm")
g<-ggplot(data, aes(Date,AA))
g+geom_point()+geom_smooth(method="lm")
g
g<-ggplot(data, aes(Date,NOK))
g+geom_point()+geom_smooth(method="lm")
library(reshape2)
?melt
plot_Data<-melt(data, value.name=c("AA","GS")
)
plot_Data<-melt(data, value.name=c("AA","GS"))
plot_Data<-melt(data, value.name=c(AA,GS))
plot_Data<-melt(data, value.name=c(data$AA,GS))
plot_Data<-melt(data, value.name=c(data$AA,data$GS))
plot_Data<-melt(data)
View(plot_Data)
plot_Data<-melt(data[,1:6], id="Date")
View(plot_Data)
data<-read.csv("C:/Users/user/Desktop/QRM/5stocks1.csv")
plot_Data<-melt(data[,1:6], id="Date")
View(plot_Data)
str(plot_Data)
plot_Data<-as.numeric(plot_Data$value)
plot_Data<-melt(data[,1:6], id="Date")
plot_Data$value<-as.numeric(plot_Data$value)
View(plot_Data)
g<-ggplot(data, aes(Date,value))
g+geom_point()+geom_smooth(method="lm")
View(plot_Data)
colnames(plot_Data)
g<-ggplot(plot_Data, aes(Date,value))
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(. ~ variable)
g+geom_point()facet_grid(variable~.)
g+geom_point()+facet_grid(variable~.)
g+geom_line()+facet_grid(variable~.)
registerDoSEQ()
g+geom_line()+facet_grid(variable~.)
g+geom_point(aes(color=variable))
data$Date<-as.Date(data$Date, format="%d/%m/%Y")
plot_Data<-melt(data[,1:6], id="Date")
View(plot_Data)
plot_Data$value<-as.numeric(plot_Data$value)
g<-ggplot(plot_Data, aes(Date,value))
g+geom_point(aes(color=variable))
g+geom_line()+facet_grid(variable~.)
g+geom_line(aes(colour=variable))+facet_grid(variable~.)
g+geom_point(aes(color=variable))
g+geom_point(aes(color=variable))+geom_smooth(lm)
g+geom_point(aes(color=variable))+geom_smooth(method="lm")
g+geom_line(aes(colour=variable))+facet_grid(variable~.)+geom_smooth(method="lm")
g+geom_line(aes(color=variable))
install.packages("forecast")
library(forecast)
?ets
ets(plot_Data)
ets(plot_Data$value)
ets(plot_Data$value[variable=="AA"])
ets(plot_Data$value[plot_Data$variable=="AA"])
HoltWinters(plot_Data$variable=="AA")
HoltWinters(plot_Data$value[plot_Data$variable=="AA"])
HoltWinters(plot_Data$value[plot_Data$variable=="AA",])
ets(plot_Data$value[plot_Data$variable=="AA",])
ets(plot_Data$value[plot_Data$variable=="AA"])
HoltWinters(plot_Data$value[plot_Data$variable=="AA"])
seasonplot(plot_Data$value[plot_Data$variable=="AA"])
?auto.arima
auto.arima(plot_Data$value[plot_Data$variable=="AA"])
plot(auto.arima(plot_Data$value[plot_Data$variable=="AA"]))
auto.arima(plot_Data$value[plot_Data$variable=="GS"])
data2$Date<-as.Date(data$Date, format="%d/%m/%Y")
data2$AA<-as.numeric(levels(data$AA))[data$AA]
data2$MSFT<-as.numeric(levels(data$MSFT))[data$MSFT]
data2$GS<-as.numeric(levels(data$GS))[data$GS]
data2$UPMKY<-as.numeric(levels(data$UPMKY))[data$UPMKY]
data2$NOK<-as.numeric(levels(data$NOK))[data$NOK]
data2<-data.frame()
data2$Date<-as.Date(data$Date, format="%d/%m/%Y")
data2$AA<-as.numeric(levels(data$AA))[data$AA]
data2$MSFT<-as.numeric(levels(data$MSFT))[data$MSFT]
data2$GS<-as.numeric(levels(data$GS))[data$GS]
data2$UPMKY<-as.numeric(levels(data$UPMKY))[data$UPMKY]
data2$NOK<-as.numeric(levels(data$NOK))[data$NOK]
View(data2)
View(data)
data2$Date<-as.Date(data$Date, format="%d/%m/%Y")
data2<-na.omit(data)
View(data2)
registerDoSEQ()
auto.arima(plot_Data$value[plot_Data$variable=="GS"])
fit<-arima(plot_Data$value[plot_Data$variable=="GS"],order=c(1,1,2))
fit
plot(fit)
predict(fit, ahead=8)
predict(fit, n.ahead=8)
GS.p<-predict(fit, n.ahead=8)
plot(GS.p[1])
plot(GS.p)
plot(GS.p$pred)
View(data2)
tail(data2$GS)
GS.p<-predict(fit, n.ahead=100)
plot(GS.p$pred)
GS.p<-predict(fit, n.ahead=10000)
plot(GS.p$pred)
g<-ggplot(plot_Data, aes(Date,value[variable=="AA"]))
g+geom_line(aes(colour=variable))+facet_grid(variable~.)+geom_smooth(method="lm")
g+geom_line(aes(color=variable))
g<-ggplot(plot_Data, aes(Date,value[variable=="AA"]))
g+geom_line(aes(colour=variable))+geom_smooth(method="lm")
g+geom_line()
g<-ggplot(plot_Data, aes(Date,value[variable=="AA",]))
g+geom_line()
plot_Data<-melt(data[,1:6], id="Date")
plot_Data$value<-as.numeric(plot_Data$value)
g<-ggplot(plot_Data, aes(Date,value))
g+geom_line(aes(colour=variable))+facet_grid(variable~.)+geom_smooth(method="lm")
g+geom_line(aes(color=variable))
g<-ggplot(plot_Data, aes(Date,value[variable=="AA",]))
g+geom_line(aes(colour=variable))+geom_smooth(method="lm")
g+geom_line(aes(color=variable))
g+geom_line()
library(caret)
library(rattle)
library(foreach)
library(doParallel)
library(randomForest)
library(kernlab)
library(MASS)
library(rpart)
library(nnet)
library(caTools)
library(ada)
library(plyr)
library(klaR)
library(gbm)
cl <- makeCluster(3)  # Use 3 cores
clusterEvalQ(cl, library(foreach))
registerDoParallel(cl) # register these 3 cores with the "foreach" package
train<-read.csv("cs-training.csv")
preObj<-preProcess(train,method="medianImpute")
trainnew<-predict(preObj,train)
trainnew$SeriousDlqin2yrs<-factor(trainnew$SeriousDlqin2yrs,levels=c("1","0"), labels=c("yes","no"))
intrain<-createDataPartition(y=trainnew$SeriousDlqin2yrs,p=0.8,list=FALSE)
training<-trainnew[intrain,]
testing<-trainnew[-intrain,]
ctrl<- trainControl(summaryFunction=twoClassSummary,classProb=TRUE)
system.time(modFit7<-train(SeriousDlqin2yrs~., data=training, method="gbm", trControl=ctrl, metric="ROC"))
1126/60
modFit7
save(modFit7, file="modFit7_gbm.rda")
ptree7<-predict(modFit7, newdata=testing, type="prob")
View(ptree7)
View(testing)
system.time(modFit4<-train(SeriousDlqin2yrs~., data=training, method="LogitBoost", trControl=ctrl, metric="ROC")) #7204
system.time(modFit5<-train(SeriousDlqin2yrs~., data=training, method="ada", trControl=ctrl, metric="ROC")) #CMI 7051
registerDoSEQ()
cl <- makeCluster(3)  # Use 3 cores
clusterEvalQ(cl, library(foreach))
registerDoParallel(cl) # register these 3 cores with the "foreach" package
system.time(modFit5<-train(SeriousDlqin2yrs~., data=training, method="ada", trControl=ctrl, metric="ROC")) #CMI 7051
directory<-file.path("C:/Users/user/Desktop/Data Science Specialization/Capstone/samples")
all_txt<-Corpus(DirSource(directory))
library(tm)
library(RWeka)
all_txt<-Corpus(DirSource(directory))
all_txt[[3]][1]
all_txt[[3]][1][1]
all_txt[[3]][[1]]
install.packages("slidify","ramnathv")
install.github("slidify","ramnathv")
library(devtools)
install.github("slidify","ramnathv")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.github("slidify","ramnathv")
find_rtools()
find_rtools()
library(devtools)
build_github_devtools()
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
author("mydeck")
library(slidify)
author("mydeck")
setwd("C:/Users/user/Desktop/Data Science Specialization/Capstone")
author("mydeck")
